' Program Title: Implexx Sap Flow Sensor Data Logging (N=2) - CR200X Compatible v3

' --- Declarations Section ---

Const NumSens = 2              ' Number of sensors (shortened name)
Const MeasInt = 30             ' Measurement interval in minutes (shortened name)
Const SDIPort = 1              ' SDI-12 port number (adjust as needed)
Const StdMeasWait = 100        ' Wait time after M! or C! in seconds (shortened name)
Const AddMeasWait = 2          ' Wait time after Mn! or Cn! in seconds (shortened name)

' Declare individual public variables for each data point for Sensor 0 (S0)
' CR200X compatible syntax: Public VariableName
Public S0_AlpOut  ' AlphaOuter
Public S0_AlpInn  ' AlphaInner
Public S0_BetOut  ' BetaOuter
Public S0_BetInn  ' BetaInner
Public S0_tMxOut  ' tMaxTouter
Public S0_tMxInn  ' tMaxTinner

Public S0_TpDOut  ' TpreDsOuter
Public S0_dTDOut  ' dTmaxDsOuter
Public S0_TsDOut  ' TpostDsOuter
Public S0_TpUOut  ' TpreUsOuter
Public S0_dTUOut  ' dTmaxUsOuter
Public S0_TsUOut  ' TpostUsOuter

Public S0_TpDInn  ' TpreDsInner
Public S0_dTDInn  ' dTmaxDsInner
Public S0_TsDInn  ' TpostDsInner
Public S0_TpUInn  ' TpreUsInner
Public S0_dTUInn  ' dTmaxUsInner
Public S0_TsUInn  ' TpostUsInner

Public S0_tMxtOUt  ' tMaxTusOuter
Public S0_tMxtInn  ' tMaxTusInner

' Declare individual public variables for each data point for Sensor 1 (S1)
Public S1_AlpOut  ' AlphaOuter
Public S1_AlpInn  ' AlphaInner
Public S1_BetOut  ' BetaOuter
Public S1_BetInn  ' BetaInner
Public S1_tMxOut  ' tMaxTouter
Public S1_tMxInn  ' tMaxTinner

Public S1_TpDOut  ' TpreDsOuter
Public S1_dTDOut  ' dTmaxDsOuter
Public S1_TsDOut  ' TpostDsOuter
Public S1_TpUOut  ' TpreUsOuter
Public S1_dTUOut  ' dTmaxUsOuter
Public S1_TsUOut  ' TpostUsOuter

Public S1_TpDInn  ' TpreDsInner
Public S1_dTDInn  ' dTmaxDsInner
Public S1_TsDInn  ' TpostDsInner
Public S1_TpUInn  ' TpreUsInner
Public S1_dTUInn  ' dTmaxUsInner
Public S1_TsUInn  ' TpostUsInner

Public S1_tMxtOUt  ' tMaxTusOuter
Public S1_tMxtInn  ' tMaxTusInner


' Declare variables for use within the scan
Dim ReturnCode as Long
Dim CommandString as String * 10
Dim ExpectedValues as Long
Dim TempValues(6) As Float ' Temporary array (dimension 1, size 7 is okay on CR200X)


' Define the data table for 2 sensors with CR200X compatible field names (<= 12 chars).
' This part needs to be manually updated if NumSensors changes.
DataTable SapFlowData (1, True) ' Log data at Scan rate, with Time as the first column
  ' Sensor 0 Data
  FieldNames("S0_AlpOut") : Sample(1, S0_AlpOut, IEEE4)
  FieldNames("S0_AlpInn") : Sample(1, S0_AlpInn, IEEE4)
  FieldNames("S0_BetOut") : Sample(1, S0_BetOut, IEEE4)
  FieldNames("S0_BetInn") : Sample(1, S0_BetInn, IEEE4)
  FieldNames("S0_tMxOut") : Sample(1, S0_tMxOut, IEEE4)
  FieldNames("S0_tMxInn") : Sample(1, S0_tMxInn, IEEE4)

  FieldNames("S0_TpDOut") : Sample(1, S0_TpDOut, IEEE4)
  FieldNames("S0_dTDOut") : Sample(1, S0_dTDOut, IEEE4)
  FieldNames("S0_TsDOut") : Sample(1, S0_TsDOut, IEEE4)
  FieldNames("S0_TpUOut") : Sample(1, S0_TpUOut, IEEE4)
  FieldNames("S0_dTUOut") : Sample(1, S0_dTUOut, IEEE4)
  FieldNames("S0_TsUOut") : Sample(1, S0_TsUOut, IEEE4)

  FieldNames("S0_TpDInn") : Sample(1, S0_TpDInn, IEEE4)
  FieldNames("S0_dTDInn") : Sample(1, S0_dTDInn, IEEE4)
  FieldNames("S0_TsDInn") : Sample(1, S0_TsDInn, IEEE4)
  FieldNames("S0_TpUInn") : Sample(1, S0_TpUInn, IEEE4)
  FieldNames("S0_dTUInn") : Sample(1, S0_dTUInn, IEEE4)
  FieldNames("S0_TsUInn") : Sample(1, S0_TsUInn, IEEE4)

  FieldNames("S0_tMxtOUt") : Sample(1, S0_tMxtOUt, IEEE4)
  FieldNames("S0_tMxtInn") : Sample(1, S0_tMxtInn, IEEE4)

  ' Sensor 1 Data
  FieldNames("S1_AlpOut") : Sample(1, S1_AlpOut, IEEE4)
  FieldNames("S1_AlpInn") : Sample(1, S1_AlpInn, IEEE4)
  FieldNames("S1_BetOut") : Sample(1, S1_BetOut, IEEE4)
  FieldNames("S1_BetInn") : Sample(1, S1_BetInn, IEEE4)
  FieldNames("S1_tMxOut") : Sample(1, S1_tMxOut, IEEE4)
  FieldNames("S1_tMxInn") : Sample(1, S1_tMxInn, IEEE4)

  FieldNames("S1_TpDOut") : Sample(1, S1_TpDOut, IEEE4)
  FieldNames("S1_dTDOut") : Sample(1, S1_dTDOut, IEEE4)
  FieldNames("S1_TsDOut") : Sample(1, S1_TsDOut, IEEE4)
  FieldNames("S1_TpUOut") : Sample(1, S1_TpUOut, IEEE4)
  FieldNames("S1_dTUOut") : Sample(1, S1_dTUOut, IEEE4)
  FieldNames("S1_TsUOut") : Sample(1, S1_TsUOut, IEEE4)

  FieldNames("S1_TpDInn") : Sample(1, S1_TpDInn, IEEE4)
  FieldNames("S1_dTDInn") : Sample(1, S1_dTDInn, IEEE4)
  FieldNames("S1_TsDInn") : Sample(1, S1_TsDInn, IEEE4)
  FieldNames("S1_TpUInn") : Sample(1, S1_TpUInn, IEEE4)
  FieldNames("S1_dTUInn") : Sample(1, S1_dTUInn, IEEE4)
  FieldNames("S1_TsUInn") : Sample(1, S1_TsUInn, IEEE4)

  FieldNames("S1_tMxtOUt") : Sample(1, S1_tMxtOUt, IEEE4)
  FieldNames("S1_tMxtInn") : Sample(1, S1_tMxtInn, IEEE4)
EndTable


'--- Main Program ---
BeginProg
  ' Configure the SDI-12 port
  ' Power management, enable required for CR300 series, good practice for CR200X with power control
  SDI12Set (SDIPort, True, 0, 0, 1.4) ' Enable port, require acknowledge, no check bytes, power on (managed by datalogger), SDI-12 v1.4

  ' Set the datalogger clock (optional, but good practice)
  ' SetSetTime()

  ' Start the main scan loop
  Scan (1, MeasInt, Min, 0) ' Scan every MeasInt minutes, starting on the hour

    ' --- Collect data for Sensor 0 (Address "0") ---
    CommandString = "0M!"
    SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, 0, 0, 0)
    If ReturnCode <> 0 Then
      ' Handle error for M! command transmission for S0
      S0_AlpOut = NAN : S0_AlpInn = NAN : S0_BetOut = NAN : S0_BetInn = NAN
      S0_tMxOut = NAN : S0_tMxInn = NAN
      S0_TpDOut = NAN : S0_dTDOut = NAN : S0_TsDOut = NAN
      S0_TpUOut = NAN : S0_dTUOut = NAN : S0_TsUOut = NAN
      S0_TpDInn = NAN : S0_dTDInn = NAN : S0_TsDInn = NAN
      S0_TpUInn = NAN : S0_dTUInn = NAN : S0_TsUInn = NAN
      S0_tMxtOUt = NAN : S0_tMxtInn = NAN
    Else
      Pause StdMeasWait * 1000 ' Wait for measurement completion

      CommandString = "0D0!"
      ExpectedValues = 5
      SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, TempValues(0), 0, 0)
      If ReturnCode <> 0 Then
        S0_AlpOut = NAN : S0_AlpInn = NAN
      Else
        S0_AlpOut = TempValues(3) : S0_AlpInn = TempValues(4)
      EndIf

      CommandString = "0D1!"
      ExpectedValues = 4
      SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, TempValues(0), 0, 0)
      If ReturnCode <> 0 Then
        S0_BetOut = NAN : S0_BetInn = NAN : S0_tMxOut = NAN : S0_tMxInn = NAN
      Else
        S0_BetOut = TempValues(0) : S0_BetInn = TempValues(1) : S0_tMxOut = TempValues(2) : S0_tMxInn = TempValues(3)
      EndIf

      CommandString = "0M1!"
      SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, 0, 0, 0)
      If ReturnCode <> 0 Then
         S0_TpDOut = NAN : S0_dTDOut = NAN : S0_TsDOut = NAN
         S0_TpUOut = NAN : S0_dTUOut = NAN : S0_TsUOut = NAN
      Else
        Pause AddMeasWait * 1000
        CommandString = "0D0!"
        ExpectedValues = 6
        SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, TempValues(0), 0, 0)
        If ReturnCode <> 0 Then
           S0_TpDOut = NAN : S0_dTDOut = NAN : S0_TsDOut = NAN
           S0_TpUOut = NAN : S0_dTUOut = NAN : S0_TsUOut = NAN
        Else
           S0_TpDOut = TempValues(0) : S0_dTDOut = TempValues(1) : S0_TsDOut = TempValues(2)
           S0_TpUOut = TempValues(3) : S0_dTUOut = TempValues(4) : S0_TsUOut = TempValues(5)
        EndIf
      EndIf

      CommandString = "0M2!"
      SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, 0, 0, 0)
       If ReturnCode <> 0 Then
         S0_TpDInn = NAN : S0_dTDInn = NAN : S0_TsDInn = NAN
         S0_TpUInn = NAN : S0_dTUInn = NAN : S0_TsUInn = NAN
      Else
        Pause AddMeasWait * 1000
        CommandString = "0D0!"
        ExpectedValues = 6
        SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, TempValues(0), 0, 0)
        If ReturnCode <> 0 Then
           S0_TpDInn = NAN : S0_dTDInn = NAN : S0_TsDInn = NAN
           S0_TpUInn = NAN : S0_dTUInn = NAN : S0_TsUInn = NAN
        Else
           S0_TpDInn = TempValues(0) : S0_dTDInn = TempValues(1) : S0_TsDInn = TempValues(2)
           S0_TpUInn = TempValues(3) : S0_dTUInn = TempValues(4) : S0_TsUInn = TempValues(5)
        EndIf
      EndIf

      CommandString = "0M5!"
      SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, 0, 0, 0)
       If ReturnCode <> 0 Then
         S0_tMxtOUt = NAN : S0_tMxtInn = NAN
      Else
        Pause AddMeasWait * 1000
        CommandString = "0D0!"
        ExpectedValues = 2
        SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, TempValues(0), 0, 0)
        If ReturnCode <> 0 Then
           S0_tMxtOUt = NAN : S0_tMxtInn = NAN
        Else
           S0_tMxtOUt = TempValues(0) : S0_tMxtInn = TempValues(1)
        EndIf
      EndIf
    EndIf ' End M! error handling for S0


    ' --- Collect data for Sensor 1 (Address "1") ---
    CommandString = "1M!"
    SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, 0, 0, 0)
     If ReturnCode <> 0 Then
      ' Handle error for M! command transmission for S1
      S1_AlpOut = NAN : S1_AlpInn = NAN : S1_BetOut = NAN : S1_BetInn = NAN
      S1_tMxOut = NAN : S1_tMxInn = NAN
      S1_TpDOut = NAN : S1_dTDOut = NAN : S1_TsDOut = NAN
      S1_TpUOut = NAN : S1_dTUOut = NAN : S1_TsUOut = NAN
      S1_TpDInn = NAN : S1_dTDInn = NAN : S1_TsDInn = NAN
      S1_TpUInn = NAN : S1_dTUInn = NAN : S1_TsUInn = NAN
      S1_tMxtOUt = NAN : S1_tMxtInn = NAN
    Else
      Pause StdMeasWait * 1000 ' Wait for measurement completion

      CommandString = "1D0!"
      ExpectedValues = 5
      SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, TempValues(0), 0, 0)
       If ReturnCode <> 0 Then
        S1_AlpOut = NAN : S1_AlpInn = NAN
      Else
        S1_AlpOut = TempValues(3) : S1_AlpInn = TempValues(4)
      EndIf

      CommandString = "1D1!"
      ExpectedValues = 4
      SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, TempValues(0), 0, 0)
      If ReturnCode <> 0 Then
        S1_BetOut = NAN : S1_BetInn = NAN : S1_tMxOut = NAN : S1_tMxInn = NAN
      Else
        S1_BetOut = TempValues(0) : S1_BetInn = TempValues(1) : S1_tMxOut = TempValues(2) : S1_tMxInn = TempValues(3)
      EndIf

      CommandString = "1M1!"
      SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, 0, 0, 0)
       If ReturnCode <> 0 Then
         S1_TpDOut = NAN : S1_dTDOut = NAN : S1_TsDOut = NAN
         S1_TpUOut = NAN : S1_dTUOut = NAN : S1_TsUOut = NAN
      Else
        Pause AddMeasWait * 1000
        CommandString = "1D0!"
        ExpectedValues = 6
        SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, TempValues(0), 0, 0)
        If ReturnCode <> 0 Then
           S1_TpDOut = NAN : S1_dTDOut = NAN : S1_TsDOut = NAN
           S1_TpUOut = NAN : S1_dTUOut = NAN : S1_TsUOut = NAN
        Else
           S1_TpDOut = TempValues(0) : S1_dTDOut = TempValues(1) : S1_TsDOut = TempValues(2)
           S1_TpUOut = TempValues(3) : S1_dTUOut = TempValues(4) : S1_TsUOut = TempValues(5)
        EndIf
      EndIf

      CommandString = "1M2!"
      SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, 0, 0, 0)
       If ReturnCode <> 0 Then
         S1_TpDInn = NAN : S1_dTDInn = NAN : S1_TsDInn = NAN
         S1_TpUInn = NAN : S1_dTUInn = NAN : S1_TsUInn = NAN
      Else
        Pause AddMeasWait * 1000
        CommandString = "1D0!"
        ExpectedValues = 6
        SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, TempValues(0), 0, 0)
        If ReturnCode <> 0 Then
           S1_TpDInn = NAN : S1_dTDInn = NAN : S1_TsDInn = NAN
           S1_TpUInn = NAN : S1_dTUInn = NAN : S1_TsUInn = NAN
        Else
           S1_TpDInn = TempValues(0) : S1_dTDInn = TempValues(1) : S1_TsDInn = TempValues(2)
           S1_TpUInn = TempValues(3) : S1_dTUInn = TempValues(4) : S1_TsUInn = TempValues(5)
        EndIf
      EndIf

      CommandString = "1M5!"
      SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, 0, 0, 0)
       If ReturnCode <> 0 Then
         S1_tMxtOUt = NAN : S1_tMxtInn = NAN
      Else
        Pause AddMeasWait * 1000
        CommandString = "1D0!"
        ExpectedValues = 2
        SDI12Recorder (ReturnCode, SDIPort, CommandString, ExpectedValues, TempValues(0), 0, 0)
        If ReturnCode <> 0 Then
           S1_tMxtOUt = NAN : S1_tMxtInn = NAN
        Else
           S1_tMxtOUt = TempValues(0) : S1_tMxtInn = TempValues(1)
        EndIf
      EndIf
    EndIf ' End M! error handling for S1


    ' Log the collected data for all sensors
    Log (SapFlowData)

  EndScan ' End of main scan loop

EndProg ' End of program