' CR200/CR200X Series
' Program Title: Implexx Sap Flow Sensor Standard Data (N=2) - Example Style v2

'Declare Variables and Units

Const MeasInt = 30             ' Measurement interval in minutes (<= 16 chars)
' SDI port is likely implicit or not explicitly configured in this example style

' Declare Public arrays to store the 9 standard data points for each sensor.
' CR200X compatible Public array syntax: Public ArrayName(Size)
Public S0_StdData(9)    ' Standard data for Sensor 0 (9 values from M!/D0/D1)
Public S1_StdData(9)    ' Standard data for Sensor 1 (9 values from M!/D0/D1)


' Use Alias to give meaningful names to the array elements (<= 12 characters).
' These alias names will serve as both the variable names in the code and the Field Names in the DataTable.
' Sensor 0 Standard Data (based on order from Implexx guide page 5)
Alias S0_StdData(1) = S0_SFTotal    ' SapFlowTotal (1st value from D0)
Alias S0_StdData(2) = S0_SFDOut     ' SFDOuter (2nd value from D0)
Alias S0_StdData(3) = S0_SFDInn     ' SFDInner (3rd value from D0)
Alias S0_StdData(4) = S0_AlpOut     ' AlphaOuter (4th value from D0)
Alias S0_StdData(5) = S0_AlpInn     ' AlphaInner (5th value from D0)
Alias S0_StdData(6) = S0_BetOut     ' BetaOuter (1st value from D1)
Alias S0_StdData(7) = S0_BetInn     ' BetaInner (2nd value from D1)
Alias S0_StdData(8) = S0_tMxOut     ' tMaxTouter (3rd value from D1)
Alias S0_StdData(9) = S0_tMxInn     ' tMaxTinner (4th value from D1)

' Sensor 1 Standard Data
Alias S1_StdData(1) = S1_SFTotal    ' SapFlowTotal
Alias S1_StdData(2) = S1_SFDOut     ' SFDOuter
Alias S1_StdData(3) = S1_SFDInn     ' SFDInner
Alias S1_StdData(4) = S1_AlpOut     ' AlphaOuter
Alias S1_StdData(5) = S1_AlpInn     ' AlphaInner
Alias S1_StdData(6) = S1_BetOut     ' BetaOuter
Alias S1_StdData(7) = S1_BetInn     ' BetaInner
Alias S1_StdData(8) = S1_tMxOut     ' tMaxTouter
Alias S1_StdData(9) = S1_tMxInn     ' tMaxTinner


' Additional variables from example
Public BattV
Public id
Public SDI0 ' Used as a placeholder for sensor 0 address
Public SDI1 ' Used as a placeholder for sensor 1 address

' Declare loop counters (from example)
Dim N
Dim N_2


'Define a Single Data Table for all sensors
' Syntax from example: DataTable(Name, TrigVar, Size)
DataTable(SapFlowData, True, -1) ' Log data every scan until memory is full

	' DataInterval from example
	DataInterval(0,MeasInt,Min) ' Log every MeasInt minutes

	' Sample instructions from example - variable names (aliases) become field names
	Minimum(1,BattV,False,False)
	Sample(1,id)
	Sample(1,SDI0) ' Placeholder
	Sample(1,SDI1) ' Placeholder

	' Sample the 9 standard values for Sensor 0 using the aliases
	Sample(1,S0_SFTotal)
	Sample(1,S0_SFDOut)
	Sample(1,S0_SFDInn)
	Sample(1,S0_AlpOut)
	Sample(1,S0_AlpInn)
	Sample(1,S0_BetOut)
	Sample(1,S0_BetInn)
	Sample(1,S0_tMxOut)
	Sample(1,S0_tMxInn)

	' Sample the 9 standard values for Sensor 1 using the aliases
	Sample(1,S1_SFTotal)
	Sample(1,S1_SFDOut)
	Sample(1,S1_SFDInn)
	Sample(1,S1_AlpOut)

EndTable


'Main Program
BeginProg

	'Main Scan
	' Syntax from example: Scan(Interval, Units)
	Scan(MeasInt,Min)
		'Default CR200 Series Datalogger Battery Voltage measurement 'BattV'
		Battery(BattV)

        ' User Entered Calculation (from example)
        id = Status.PakBusAddress(1,1)
        SDI0 = 0 ' Placeholder value
        SDI1 = 1 ' Placeholder value

		' --- Collect standard data for Sensor 0 (Address "0") using example syntax ---
		' SDI12Recorder syntax from example: SDI12Recorder(ArrayName(), "aM!", 1, 0)
		' This call initiates the standard measurement and populates the array elements 1 through 9.
		' The aliases then point to these populated elements.
		SDI12Recorder(S0_StdData(), "0M!", 1, 0)

		'Reset all Generic SDI-12 Sensor measurements if NAN is returned to the first element (example style)
		If S0_StdData(1) = NAN Then
			For N = 1 To 9
				S0_StdData(N) = NAN
			Next
		EndIf

		' --- Collect standard data for Sensor 1 (Address "1") using example syntax ---
		SDI12Recorder(S1_StdData(), "1M!", 1, 0)

		'Reset all Generic SDI-12 Sensor measurements if NAN is returned to the first element (example style)
		If S1_StdData(1) = NAN Then
			For N_2 = 1 To 9
				S1_StdData(N_2) = NAN
			Next
		EndIf


		'Call Data Table and Store Data
		' Syntax from example: CallTable TableName
		CallTable SapFlowData
	NextScan
EndProg