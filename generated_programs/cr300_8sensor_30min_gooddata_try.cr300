' CR300 Series Datalogger Program
' Program to log 20 specified measurements from Implexx Sap Flow Sensors
' Generated by Python Script (cr300_generator.py)
' Number of Sensors: 8
' Measurement Interval: 30 minutes

'--- Constants ---
Const MEAST_INTERVAL_MIN = 30
Const SDI12_PORT = C1 ' Default SDI-12 Port on CR300 (can be C1, C2, etc.)
Const STD_MEAS_WAIT_MS = 100000 ' For M! type commands
Const ADD_MEAS_WAIT_MS = 2000 ' For M1-M6 type commands

'--- Declare Public Variables ---
Public PTemp As Float
Public Batt_volt As Float

' Variables to hold the measurements for each sensor
Public S0_AlpOut As Float : Units S0_AlpOut=ratio
Public S0_AlpInn As Float : Units S0_AlpInn=ratio
Public S0_BetOut As Float : Units S0_BetOut=ratio
Public S0_BetInn As Float : Units S0_BetInn=ratio
Public S0_tMxTout As Float : Units S0_tMxTout=sec
Public S0_tMxTinn As Float : Units S0_tMxTinn=sec
Public S0_TpDsOut As Float : Units S0_TpDsOut=degC
Public S0_dTDsOut As Float : Units S0_dTDsOut=degC
Public S0_TsDsOut As Float : Units S0_TsDsOut=degC
Public S0_TpUsOut As Float : Units S0_TpUsOut=degC
Public S0_dTUsOut As Float : Units S0_dTUsOut=degC
Public S0_TsUsOut As Float : Units S0_TsUsOut=degC
Public S0_TpDsInn As Float : Units S0_TpDsInn=degC
Public S0_dTDsInn As Float : Units S0_dTDsInn=degC
Public S0_TsDsInn As Float : Units S0_TsDsInn=degC
Public S0_TpUsInn As Float : Units S0_TpUsInn=degC
Public S0_dTUsInn As Float : Units S0_dTUsInn=degC
Public S0_TsUsInn As Float : Units S0_TsUsInn=degC
Public S0_tMxTUsO As Float : Units S0_tMxTUsO=sec
Public S0_tMxTUsI As Float : Units S0_tMxTUsI=sec
Public S1_AlpOut As Float : Units S1_AlpOut=ratio
Public S1_AlpInn As Float : Units S1_AlpInn=ratio
Public S1_BetOut As Float : Units S1_BetOut=ratio
Public S1_BetInn As Float : Units S1_BetInn=ratio
Public S1_tMxTout As Float : Units S1_tMxTout=sec
Public S1_tMxTinn As Float : Units S1_tMxTinn=sec
Public S1_TpDsOut As Float : Units S1_TpDsOut=degC
Public S1_dTDsOut As Float : Units S1_dTDsOut=degC
Public S1_TsDsOut As Float : Units S1_TsDsOut=degC
Public S1_TpUsOut As Float : Units S1_TpUsOut=degC
Public S1_dTUsOut As Float : Units S1_dTUsOut=degC
Public S1_TsUsOut As Float : Units S1_TsUsOut=degC
Public S1_TpDsInn As Float : Units S1_TpDsInn=degC
Public S1_dTDsInn As Float : Units S1_dTDsInn=degC
Public S1_TsDsInn As Float : Units S1_TsDsInn=degC
Public S1_TpUsInn As Float : Units S1_TpUsInn=degC
Public S1_dTUsInn As Float : Units S1_dTUsInn=degC
Public S1_TsUsInn As Float : Units S1_TsUsInn=degC
Public S1_tMxTUsO As Float : Units S1_tMxTUsO=sec
Public S1_tMxTUsI As Float : Units S1_tMxTUsI=sec
Public S2_AlpOut As Float : Units S2_AlpOut=ratio
Public S2_AlpInn As Float : Units S2_AlpInn=ratio
Public S2_BetOut As Float : Units S2_BetOut=ratio
Public S2_BetInn As Float : Units S2_BetInn=ratio
Public S2_tMxTout As Float : Units S2_tMxTout=sec
Public S2_tMxTinn As Float : Units S2_tMxTinn=sec
Public S2_TpDsOut As Float : Units S2_TpDsOut=degC
Public S2_dTDsOut As Float : Units S2_dTDsOut=degC
Public S2_TsDsOut As Float : Units S2_TsDsOut=degC
Public S2_TpUsOut As Float : Units S2_TpUsOut=degC
Public S2_dTUsOut As Float : Units S2_dTUsOut=degC
Public S2_TsUsOut As Float : Units S2_TsUsOut=degC
Public S2_TpDsInn As Float : Units S2_TpDsInn=degC
Public S2_dTDsInn As Float : Units S2_dTDsInn=degC
Public S2_TsDsInn As Float : Units S2_TsDsInn=degC
Public S2_TpUsInn As Float : Units S2_TpUsInn=degC
Public S2_dTUsInn As Float : Units S2_dTUsInn=degC
Public S2_TsUsInn As Float : Units S2_TsUsInn=degC
Public S2_tMxTUsO As Float : Units S2_tMxTUsO=sec
Public S2_tMxTUsI As Float : Units S2_tMxTUsI=sec
Public S3_AlpOut As Float : Units S3_AlpOut=ratio
Public S3_AlpInn As Float : Units S3_AlpInn=ratio
Public S3_BetOut As Float : Units S3_BetOut=ratio
Public S3_BetInn As Float : Units S3_BetInn=ratio
Public S3_tMxTout As Float : Units S3_tMxTout=sec
Public S3_tMxTinn As Float : Units S3_tMxTinn=sec
Public S3_TpDsOut As Float : Units S3_TpDsOut=degC
Public S3_dTDsOut As Float : Units S3_dTDsOut=degC
Public S3_TsDsOut As Float : Units S3_TsDsOut=degC
Public S3_TpUsOut As Float : Units S3_TpUsOut=degC
Public S3_dTUsOut As Float : Units S3_dTUsOut=degC
Public S3_TsUsOut As Float : Units S3_TsUsOut=degC
Public S3_TpDsInn As Float : Units S3_TpDsInn=degC
Public S3_dTDsInn As Float : Units S3_dTDsInn=degC
Public S3_TsDsInn As Float : Units S3_TsDsInn=degC
Public S3_TpUsInn As Float : Units S3_TpUsInn=degC
Public S3_dTUsInn As Float : Units S3_dTUsInn=degC
Public S3_TsUsInn As Float : Units S3_TsUsInn=degC
Public S3_tMxTUsO As Float : Units S3_tMxTUsO=sec
Public S3_tMxTUsI As Float : Units S3_tMxTUsI=sec
Public S4_AlpOut As Float : Units S4_AlpOut=ratio
Public S4_AlpInn As Float : Units S4_AlpInn=ratio
Public S4_BetOut As Float : Units S4_BetOut=ratio
Public S4_BetInn As Float : Units S4_BetInn=ratio
Public S4_tMxTout As Float : Units S4_tMxTout=sec
Public S4_tMxTinn As Float : Units S4_tMxTinn=sec
Public S4_TpDsOut As Float : Units S4_TpDsOut=degC
Public S4_dTDsOut As Float : Units S4_dTDsOut=degC
Public S4_TsDsOut As Float : Units S4_TsDsOut=degC
Public S4_TpUsOut As Float : Units S4_TpUsOut=degC
Public S4_dTUsOut As Float : Units S4_dTUsOut=degC
Public S4_TsUsOut As Float : Units S4_TsUsOut=degC
Public S4_TpDsInn As Float : Units S4_TpDsInn=degC
Public S4_dTDsInn As Float : Units S4_dTDsInn=degC
Public S4_TsDsInn As Float : Units S4_TsDsInn=degC
Public S4_TpUsInn As Float : Units S4_TpUsInn=degC
Public S4_dTUsInn As Float : Units S4_dTUsInn=degC
Public S4_TsUsInn As Float : Units S4_TsUsInn=degC
Public S4_tMxTUsO As Float : Units S4_tMxTUsO=sec
Public S4_tMxTUsI As Float : Units S4_tMxTUsI=sec
Public S5_AlpOut As Float : Units S5_AlpOut=ratio
Public S5_AlpInn As Float : Units S5_AlpInn=ratio
Public S5_BetOut As Float : Units S5_BetOut=ratio
Public S5_BetInn As Float : Units S5_BetInn=ratio
Public S5_tMxTout As Float : Units S5_tMxTout=sec
Public S5_tMxTinn As Float : Units S5_tMxTinn=sec
Public S5_TpDsOut As Float : Units S5_TpDsOut=degC
Public S5_dTDsOut As Float : Units S5_dTDsOut=degC
Public S5_TsDsOut As Float : Units S5_TsDsOut=degC
Public S5_TpUsOut As Float : Units S5_TpUsOut=degC
Public S5_dTUsOut As Float : Units S5_dTUsOut=degC
Public S5_TsUsOut As Float : Units S5_TsUsOut=degC
Public S5_TpDsInn As Float : Units S5_TpDsInn=degC
Public S5_dTDsInn As Float : Units S5_dTDsInn=degC
Public S5_TsDsInn As Float : Units S5_TsDsInn=degC
Public S5_TpUsInn As Float : Units S5_TpUsInn=degC
Public S5_dTUsInn As Float : Units S5_dTUsInn=degC
Public S5_TsUsInn As Float : Units S5_TsUsInn=degC
Public S5_tMxTUsO As Float : Units S5_tMxTUsO=sec
Public S5_tMxTUsI As Float : Units S5_tMxTUsI=sec
Public S6_AlpOut As Float : Units S6_AlpOut=ratio
Public S6_AlpInn As Float : Units S6_AlpInn=ratio
Public S6_BetOut As Float : Units S6_BetOut=ratio
Public S6_BetInn As Float : Units S6_BetInn=ratio
Public S6_tMxTout As Float : Units S6_tMxTout=sec
Public S6_tMxTinn As Float : Units S6_tMxTinn=sec
Public S6_TpDsOut As Float : Units S6_TpDsOut=degC
Public S6_dTDsOut As Float : Units S6_dTDsOut=degC
Public S6_TsDsOut As Float : Units S6_TsDsOut=degC
Public S6_TpUsOut As Float : Units S6_TpUsOut=degC
Public S6_dTUsOut As Float : Units S6_dTUsOut=degC
Public S6_TsUsOut As Float : Units S6_TsUsOut=degC
Public S6_TpDsInn As Float : Units S6_TpDsInn=degC
Public S6_dTDsInn As Float : Units S6_dTDsInn=degC
Public S6_TsDsInn As Float : Units S6_TsDsInn=degC
Public S6_TpUsInn As Float : Units S6_TpUsInn=degC
Public S6_dTUsInn As Float : Units S6_dTUsInn=degC
Public S6_TsUsInn As Float : Units S6_TsUsInn=degC
Public S6_tMxTUsO As Float : Units S6_tMxTUsO=sec
Public S6_tMxTUsI As Float : Units S6_tMxTUsI=sec
Public S7_AlpOut As Float : Units S7_AlpOut=ratio
Public S7_AlpInn As Float : Units S7_AlpInn=ratio
Public S7_BetOut As Float : Units S7_BetOut=ratio
Public S7_BetInn As Float : Units S7_BetInn=ratio
Public S7_tMxTout As Float : Units S7_tMxTout=sec
Public S7_tMxTinn As Float : Units S7_tMxTinn=sec
Public S7_TpDsOut As Float : Units S7_TpDsOut=degC
Public S7_dTDsOut As Float : Units S7_dTDsOut=degC
Public S7_TsDsOut As Float : Units S7_TsDsOut=degC
Public S7_TpUsOut As Float : Units S7_TpUsOut=degC
Public S7_dTUsOut As Float : Units S7_dTUsOut=degC
Public S7_TsUsOut As Float : Units S7_TsUsOut=degC
Public S7_TpDsInn As Float : Units S7_TpDsInn=degC
Public S7_dTDsInn As Float : Units S7_dTDsInn=degC
Public S7_TsDsInn As Float : Units S7_TsDsInn=degC
Public S7_TpUsInn As Float : Units S7_TpUsInn=degC
Public S7_dTUsInn As Float : Units S7_dTUsInn=degC
Public S7_TsUsInn As Float : Units S7_TsUsInn=degC
Public S7_tMxTUsO As Float : Units S7_tMxTUsO=sec
Public S7_tMxTUsI As Float : Units S7_tMxTUsI=sec

' Temporary array for SDI12Recorder responses
Dim TempSDIRd(6) As Float ' Max 6 values from any single D0! call

Dim SDI12CmdString As String * 10 ' For commands like aM!, aD0!
Dim SDI12AddrChar As String * 1  ' For single address character
Dim SDI12BaseCmd As String * 3   ' For M!, D0!, M1!, etc.
Dim SDI12ReturnCode As Long
Dim SDI12ExpectedValues As Long ' For atttn 'n' response from M/C commands

'--- DataTable Definition (Single Table for All Sensors) ---
DataTable (SapFlowAll, True, -1)
  DataInterval (0, MEAST_INTERVAL_MIN, Min, 0)
  Sample (1, Batt_volt, FP2)
  Sample (1, PTemp, FP2)
  Sample (1, S0_AlpOut, IEEE4)
  Sample (1, S0_AlpInn, IEEE4)
  Sample (1, S0_BetOut, IEEE4)
  Sample (1, S0_BetInn, IEEE4)
  Sample (1, S0_tMxTout, IEEE4)
  Sample (1, S0_tMxTinn, IEEE4)
  Sample (1, S0_TpDsOut, IEEE4)
  Sample (1, S0_dTDsOut, IEEE4)
  Sample (1, S0_TsDsOut, IEEE4)
  Sample (1, S0_TpUsOut, IEEE4)
  Sample (1, S0_dTUsOut, IEEE4)
  Sample (1, S0_TsUsOut, IEEE4)
  Sample (1, S0_TpDsInn, IEEE4)
  Sample (1, S0_dTDsInn, IEEE4)
  Sample (1, S0_TsDsInn, IEEE4)
  Sample (1, S0_TpUsInn, IEEE4)
  Sample (1, S0_dTUsInn, IEEE4)
  Sample (1, S0_TsUsInn, IEEE4)
  Sample (1, S0_tMxTUsO, IEEE4)
  Sample (1, S0_tMxTUsI, IEEE4)
  Sample (1, S1_AlpOut, IEEE4)
  Sample (1, S1_AlpInn, IEEE4)
  Sample (1, S1_BetOut, IEEE4)
  Sample (1, S1_BetInn, IEEE4)
  Sample (1, S1_tMxTout, IEEE4)
  Sample (1, S1_tMxTinn, IEEE4)
  Sample (1, S1_TpDsOut, IEEE4)
  Sample (1, S1_dTDsOut, IEEE4)
  Sample (1, S1_TsDsOut, IEEE4)
  Sample (1, S1_TpUsOut, IEEE4)
  Sample (1, S1_dTUsOut, IEEE4)
  Sample (1, S1_TsUsOut, IEEE4)
  Sample (1, S1_TpDsInn, IEEE4)
  Sample (1, S1_dTDsInn, IEEE4)
  Sample (1, S1_TsDsInn, IEEE4)
  Sample (1, S1_TpUsInn, IEEE4)
  Sample (1, S1_dTUsInn, IEEE4)
  Sample (1, S1_TsUsInn, IEEE4)
  Sample (1, S1_tMxTUsO, IEEE4)
  Sample (1, S1_tMxTUsI, IEEE4)
  Sample (1, S2_AlpOut, IEEE4)
  Sample (1, S2_AlpInn, IEEE4)
  Sample (1, S2_BetOut, IEEE4)
  Sample (1, S2_BetInn, IEEE4)
  Sample (1, S2_tMxTout, IEEE4)
  Sample (1, S2_tMxTinn, IEEE4)
  Sample (1, S2_TpDsOut, IEEE4)
  Sample (1, S2_dTDsOut, IEEE4)
  Sample (1, S2_TsDsOut, IEEE4)
  Sample (1, S2_TpUsOut, IEEE4)
  Sample (1, S2_dTUsOut, IEEE4)
  Sample (1, S2_TsUsOut, IEEE4)
  Sample (1, S2_TpDsInn, IEEE4)
  Sample (1, S2_dTDsInn, IEEE4)
  Sample (1, S2_TsDsInn, IEEE4)
  Sample (1, S2_TpUsInn, IEEE4)
  Sample (1, S2_dTUsInn, IEEE4)
  Sample (1, S2_TsUsInn, IEEE4)
  Sample (1, S2_tMxTUsO, IEEE4)
  Sample (1, S2_tMxTUsI, IEEE4)
  Sample (1, S3_AlpOut, IEEE4)
  Sample (1, S3_AlpInn, IEEE4)
  Sample (1, S3_BetOut, IEEE4)
  Sample (1, S3_BetInn, IEEE4)
  Sample (1, S3_tMxTout, IEEE4)
  Sample (1, S3_tMxTinn, IEEE4)
  Sample (1, S3_TpDsOut, IEEE4)
  Sample (1, S3_dTDsOut, IEEE4)
  Sample (1, S3_TsDsOut, IEEE4)
  Sample (1, S3_TpUsOut, IEEE4)
  Sample (1, S3_dTUsOut, IEEE4)
  Sample (1, S3_TsUsOut, IEEE4)
  Sample (1, S3_TpDsInn, IEEE4)
  Sample (1, S3_dTDsInn, IEEE4)
  Sample (1, S3_TsDsInn, IEEE4)
  Sample (1, S3_TpUsInn, IEEE4)
  Sample (1, S3_dTUsInn, IEEE4)
  Sample (1, S3_TsUsInn, IEEE4)
  Sample (1, S3_tMxTUsO, IEEE4)
  Sample (1, S3_tMxTUsI, IEEE4)
  Sample (1, S4_AlpOut, IEEE4)
  Sample (1, S4_AlpInn, IEEE4)
  Sample (1, S4_BetOut, IEEE4)
  Sample (1, S4_BetInn, IEEE4)
  Sample (1, S4_tMxTout, IEEE4)
  Sample (1, S4_tMxTinn, IEEE4)
  Sample (1, S4_TpDsOut, IEEE4)
  Sample (1, S4_dTDsOut, IEEE4)
  Sample (1, S4_TsDsOut, IEEE4)
  Sample (1, S4_TpUsOut, IEEE4)
  Sample (1, S4_dTUsOut, IEEE4)
  Sample (1, S4_TsUsOut, IEEE4)
  Sample (1, S4_TpDsInn, IEEE4)
  Sample (1, S4_dTDsInn, IEEE4)
  Sample (1, S4_TsDsInn, IEEE4)
  Sample (1, S4_TpUsInn, IEEE4)
  Sample (1, S4_dTUsInn, IEEE4)
  Sample (1, S4_TsUsInn, IEEE4)
  Sample (1, S4_tMxTUsO, IEEE4)
  Sample (1, S4_tMxTUsI, IEEE4)
  Sample (1, S5_AlpOut, IEEE4)
  Sample (1, S5_AlpInn, IEEE4)
  Sample (1, S5_BetOut, IEEE4)
  Sample (1, S5_BetInn, IEEE4)
  Sample (1, S5_tMxTout, IEEE4)
  Sample (1, S5_tMxTinn, IEEE4)
  Sample (1, S5_TpDsOut, IEEE4)
  Sample (1, S5_dTDsOut, IEEE4)
  Sample (1, S5_TsDsOut, IEEE4)
  Sample (1, S5_TpUsOut, IEEE4)
  Sample (1, S5_dTUsOut, IEEE4)
  Sample (1, S5_TsUsOut, IEEE4)
  Sample (1, S5_TpDsInn, IEEE4)
  Sample (1, S5_dTDsInn, IEEE4)
  Sample (1, S5_TsDsInn, IEEE4)
  Sample (1, S5_TpUsInn, IEEE4)
  Sample (1, S5_dTUsInn, IEEE4)
  Sample (1, S5_TsUsInn, IEEE4)
  Sample (1, S5_tMxTUsO, IEEE4)
  Sample (1, S5_tMxTUsI, IEEE4)
  Sample (1, S6_AlpOut, IEEE4)
  Sample (1, S6_AlpInn, IEEE4)
  Sample (1, S6_BetOut, IEEE4)
  Sample (1, S6_BetInn, IEEE4)
  Sample (1, S6_tMxTout, IEEE4)
  Sample (1, S6_tMxTinn, IEEE4)
  Sample (1, S6_TpDsOut, IEEE4)
  Sample (1, S6_dTDsOut, IEEE4)
  Sample (1, S6_TsDsOut, IEEE4)
  Sample (1, S6_TpUsOut, IEEE4)
  Sample (1, S6_dTUsOut, IEEE4)
  Sample (1, S6_TsUsOut, IEEE4)
  Sample (1, S6_TpDsInn, IEEE4)
  Sample (1, S6_dTDsInn, IEEE4)
  Sample (1, S6_TsDsInn, IEEE4)
  Sample (1, S6_TpUsInn, IEEE4)
  Sample (1, S6_dTUsInn, IEEE4)
  Sample (1, S6_TsUsInn, IEEE4)
  Sample (1, S6_tMxTUsO, IEEE4)
  Sample (1, S6_tMxTUsI, IEEE4)
  Sample (1, S7_AlpOut, IEEE4)
  Sample (1, S7_AlpInn, IEEE4)
  Sample (1, S7_BetOut, IEEE4)
  Sample (1, S7_BetInn, IEEE4)
  Sample (1, S7_tMxTout, IEEE4)
  Sample (1, S7_tMxTinn, IEEE4)
  Sample (1, S7_TpDsOut, IEEE4)
  Sample (1, S7_dTDsOut, IEEE4)
  Sample (1, S7_TsDsOut, IEEE4)
  Sample (1, S7_TpUsOut, IEEE4)
  Sample (1, S7_dTUsOut, IEEE4)
  Sample (1, S7_TsUsOut, IEEE4)
  Sample (1, S7_TpDsInn, IEEE4)
  Sample (1, S7_dTDsInn, IEEE4)
  Sample (1, S7_TsDsInn, IEEE4)
  Sample (1, S7_TpUsInn, IEEE4)
  Sample (1, S7_dTUsInn, IEEE4)
  Sample (1, S7_TsUsInn, IEEE4)
  Sample (1, S7_tMxTUsO, IEEE4)
  Sample (1, S7_tMxTUsI, IEEE4)
EndTable

'--- Main Program ---
SequentialMode ' Ensure instructions complete before next
BeginProg
  Scan (MEAST_INTERVAL_MIN, Min, 0, 0)
    PanelTemp (PTemp, 60) ' Or remove 273.15 for Celsius
    Battery (Batt_volt)

    ' --- Sensor 0 (Address "0") ---
    SDI12AddrChar = "0"

    ' Standard Measurement (M!)
    SDI12BaseCmd = "M!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, STD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 5)
      If SDI12ReturnCode = 0 Then
        S0_AlpOut = TempSDIRd(4)
        S0_AlpInn = TempSDIRd(5)
      Else
        S0_AlpOut = NAN : S0_AlpInn = NAN
      EndIf
      SDI12BaseCmd = "D1!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 4)
      If SDI12ReturnCode = 0 Then
        S0_BetOut = TempSDIRd(1)
        S0_BetInn = TempSDIRd(2)
        S0_tMxTout = TempSDIRd(3)
        S0_tMxTinn = TempSDIRd(4)
      Else
        S0_BetOut = NAN : S0_BetInn = NAN : S0_tMxTout = NAN : S0_tMxTinn = NAN
      EndIf
    Else
      S0_AlpOut = NAN : S0_AlpInn = NAN : S0_BetOut = NAN : S0_BetInn = NAN : S0_tMxTout = NAN : S0_tMxTinn = NAN
    EndIf

    ' M1! - Outer Thermistor Temperatures
    SDI12BaseCmd = "M1!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S0_TpDsOut = TempSDIRd(1) : S0_dTDsOut = TempSDIRd(2) : S0_TsDsOut = TempSDIRd(3)
        S0_TpUsOut = TempSDIRd(4) : S0_dTUsOut = TempSDIRd(5) : S0_TsUsOut = TempSDIRd(6)
      Else
        S0_TpDsOut = NAN : S0_dTDsOut = NAN : S0_TsDsOut = NAN : S0_TpUsOut = NAN : S0_dTUsOut = NAN : S0_TsUsOut = NAN
      EndIf
    Else
      S0_TpDsOut = NAN : S0_dTDsOut = NAN : S0_TsDsOut = NAN : S0_TpUsOut = NAN : S0_dTUsOut = NAN : S0_TsUsOut = NAN
    EndIf

    ' M2! - Inner Thermistor Temperatures
    SDI12BaseCmd = "M2!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S0_TpDsInn = TempSDIRd(1) : S0_dTDsInn = TempSDIRd(2) : S0_TsDsInn = TempSDIRd(3)
        S0_TpUsInn = TempSDIRd(4) : S0_dTUsInn = TempSDIRd(5) : S0_TsUsInn = TempSDIRd(6)
      Else
        S0_TpDsInn = NAN : S0_dTDsInn = NAN : S0_TsDsInn = NAN : S0_TpUsInn = NAN : S0_dTUsInn = NAN : S0_TsUsInn = NAN
      EndIf
    Else
      S0_TpDsInn = NAN : S0_dTDsInn = NAN : S0_TsDsInn = NAN : S0_TpUsInn = NAN : S0_dTUsInn = NAN : S0_TsUsInn = NAN
    EndIf

    ' M5! - Upstream Thermistor Max Temp Times
    SDI12BaseCmd = "M5!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 2)
      If SDI12ReturnCode = 0 Then
        S0_tMxTUsO = TempSDIRd(1)
        S0_tMxTUsI = TempSDIRd(2)
      Else
        S0_tMxTUsO = NAN : S0_tMxTUsI = NAN
      EndIf
    Else
      S0_tMxTUsO = NAN : S0_tMxTUsI = NAN
    EndIf

    ' --- Sensor 1 (Address "1") ---
    SDI12AddrChar = "1"

    ' Standard Measurement (M!)
    SDI12BaseCmd = "M!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, STD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 5)
      If SDI12ReturnCode = 0 Then
        S1_AlpOut = TempSDIRd(4)
        S1_AlpInn = TempSDIRd(5)
      Else
        S1_AlpOut = NAN : S1_AlpInn = NAN
      EndIf
      SDI12BaseCmd = "D1!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 4)
      If SDI12ReturnCode = 0 Then
        S1_BetOut = TempSDIRd(1)
        S1_BetInn = TempSDIRd(2)
        S1_tMxTout = TempSDIRd(3)
        S1_tMxTinn = TempSDIRd(4)
      Else
        S1_BetOut = NAN : S1_BetInn = NAN : S1_tMxTout = NAN : S1_tMxTinn = NAN
      EndIf
    Else
      S1_AlpOut = NAN : S1_AlpInn = NAN : S1_BetOut = NAN : S1_BetInn = NAN : S1_tMxTout = NAN : S1_tMxTinn = NAN
    EndIf

    ' M1! - Outer Thermistor Temperatures
    SDI12BaseCmd = "M1!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S1_TpDsOut = TempSDIRd(1) : S1_dTDsOut = TempSDIRd(2) : S1_TsDsOut = TempSDIRd(3)
        S1_TpUsOut = TempSDIRd(4) : S1_dTUsOut = TempSDIRd(5) : S1_TsUsOut = TempSDIRd(6)
      Else
        S1_TpDsOut = NAN : S1_dTDsOut = NAN : S1_TsDsOut = NAN : S1_TpUsOut = NAN : S1_dTUsOut = NAN : S1_TsUsOut = NAN
      EndIf
    Else
      S1_TpDsOut = NAN : S1_dTDsOut = NAN : S1_TsDsOut = NAN : S1_TpUsOut = NAN : S1_dTUsOut = NAN : S1_TsUsOut = NAN
    EndIf

    ' M2! - Inner Thermistor Temperatures
    SDI12BaseCmd = "M2!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S1_TpDsInn = TempSDIRd(1) : S1_dTDsInn = TempSDIRd(2) : S1_TsDsInn = TempSDIRd(3)
        S1_TpUsInn = TempSDIRd(4) : S1_dTUsInn = TempSDIRd(5) : S1_TsUsInn = TempSDIRd(6)
      Else
        S1_TpDsInn = NAN : S1_dTDsInn = NAN : S1_TsDsInn = NAN : S1_TpUsInn = NAN : S1_dTUsInn = NAN : S1_TsUsInn = NAN
      EndIf
    Else
      S1_TpDsInn = NAN : S1_dTDsInn = NAN : S1_TsDsInn = NAN : S1_TpUsInn = NAN : S1_dTUsInn = NAN : S1_TsUsInn = NAN
    EndIf

    ' M5! - Upstream Thermistor Max Temp Times
    SDI12BaseCmd = "M5!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 2)
      If SDI12ReturnCode = 0 Then
        S1_tMxTUsO = TempSDIRd(1)
        S1_tMxTUsI = TempSDIRd(2)
      Else
        S1_tMxTUsO = NAN : S1_tMxTUsI = NAN
      EndIf
    Else
      S1_tMxTUsO = NAN : S1_tMxTUsI = NAN
    EndIf

    ' --- Sensor 2 (Address "2") ---
    SDI12AddrChar = "2"

    ' Standard Measurement (M!)
    SDI12BaseCmd = "M!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, STD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 5)
      If SDI12ReturnCode = 0 Then
        S2_AlpOut = TempSDIRd(4)
        S2_AlpInn = TempSDIRd(5)
      Else
        S2_AlpOut = NAN : S2_AlpInn = NAN
      EndIf
      SDI12BaseCmd = "D1!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 4)
      If SDI12ReturnCode = 0 Then
        S2_BetOut = TempSDIRd(1)
        S2_BetInn = TempSDIRd(2)
        S2_tMxTout = TempSDIRd(3)
        S2_tMxTinn = TempSDIRd(4)
      Else
        S2_BetOut = NAN : S2_BetInn = NAN : S2_tMxTout = NAN : S2_tMxTinn = NAN
      EndIf
    Else
      S2_AlpOut = NAN : S2_AlpInn = NAN : S2_BetOut = NAN : S2_BetInn = NAN : S2_tMxTout = NAN : S2_tMxTinn = NAN
    EndIf

    ' M1! - Outer Thermistor Temperatures
    SDI12BaseCmd = "M1!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S2_TpDsOut = TempSDIRd(1) : S2_dTDsOut = TempSDIRd(2) : S2_TsDsOut = TempSDIRd(3)
        S2_TpUsOut = TempSDIRd(4) : S2_dTUsOut = TempSDIRd(5) : S2_TsUsOut = TempSDIRd(6)
      Else
        S2_TpDsOut = NAN : S2_dTDsOut = NAN : S2_TsDsOut = NAN : S2_TpUsOut = NAN : S2_dTUsOut = NAN : S2_TsUsOut = NAN
      EndIf
    Else
      S2_TpDsOut = NAN : S2_dTDsOut = NAN : S2_TsDsOut = NAN : S2_TpUsOut = NAN : S2_dTUsOut = NAN : S2_TsUsOut = NAN
    EndIf

    ' M2! - Inner Thermistor Temperatures
    SDI12BaseCmd = "M2!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S2_TpDsInn = TempSDIRd(1) : S2_dTDsInn = TempSDIRd(2) : S2_TsDsInn = TempSDIRd(3)
        S2_TpUsInn = TempSDIRd(4) : S2_dTUsInn = TempSDIRd(5) : S2_TsUsInn = TempSDIRd(6)
      Else
        S2_TpDsInn = NAN : S2_dTDsInn = NAN : S2_TsDsInn = NAN : S2_TpUsInn = NAN : S2_dTUsInn = NAN : S2_TsUsInn = NAN
      EndIf
    Else
      S2_TpDsInn = NAN : S2_dTDsInn = NAN : S2_TsDsInn = NAN : S2_TpUsInn = NAN : S2_dTUsInn = NAN : S2_TsUsInn = NAN
    EndIf

    ' M5! - Upstream Thermistor Max Temp Times
    SDI12BaseCmd = "M5!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 2)
      If SDI12ReturnCode = 0 Then
        S2_tMxTUsO = TempSDIRd(1)
        S2_tMxTUsI = TempSDIRd(2)
      Else
        S2_tMxTUsO = NAN : S2_tMxTUsI = NAN
      EndIf
    Else
      S2_tMxTUsO = NAN : S2_tMxTUsI = NAN
    EndIf

    ' --- Sensor 3 (Address "3") ---
    SDI12AddrChar = "3"

    ' Standard Measurement (M!)
    SDI12BaseCmd = "M!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, STD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 5)
      If SDI12ReturnCode = 0 Then
        S3_AlpOut = TempSDIRd(4)
        S3_AlpInn = TempSDIRd(5)
      Else
        S3_AlpOut = NAN : S3_AlpInn = NAN
      EndIf
      SDI12BaseCmd = "D1!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 4)
      If SDI12ReturnCode = 0 Then
        S3_BetOut = TempSDIRd(1)
        S3_BetInn = TempSDIRd(2)
        S3_tMxTout = TempSDIRd(3)
        S3_tMxTinn = TempSDIRd(4)
      Else
        S3_BetOut = NAN : S3_BetInn = NAN : S3_tMxTout = NAN : S3_tMxTinn = NAN
      EndIf
    Else
      S3_AlpOut = NAN : S3_AlpInn = NAN : S3_BetOut = NAN : S3_BetInn = NAN : S3_tMxTout = NAN : S3_tMxTinn = NAN
    EndIf

    ' M1! - Outer Thermistor Temperatures
    SDI12BaseCmd = "M1!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S3_TpDsOut = TempSDIRd(1) : S3_dTDsOut = TempSDIRd(2) : S3_TsDsOut = TempSDIRd(3)
        S3_TpUsOut = TempSDIRd(4) : S3_dTUsOut = TempSDIRd(5) : S3_TsUsOut = TempSDIRd(6)
      Else
        S3_TpDsOut = NAN : S3_dTDsOut = NAN : S3_TsDsOut = NAN : S3_TpUsOut = NAN : S3_dTUsOut = NAN : S3_TsUsOut = NAN
      EndIf
    Else
      S3_TpDsOut = NAN : S3_dTDsOut = NAN : S3_TsDsOut = NAN : S3_TpUsOut = NAN : S3_dTUsOut = NAN : S3_TsUsOut = NAN
    EndIf

    ' M2! - Inner Thermistor Temperatures
    SDI12BaseCmd = "M2!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S3_TpDsInn = TempSDIRd(1) : S3_dTDsInn = TempSDIRd(2) : S3_TsDsInn = TempSDIRd(3)
        S3_TpUsInn = TempSDIRd(4) : S3_dTUsInn = TempSDIRd(5) : S3_TsUsInn = TempSDIRd(6)
      Else
        S3_TpDsInn = NAN : S3_dTDsInn = NAN : S3_TsDsInn = NAN : S3_TpUsInn = NAN : S3_dTUsInn = NAN : S3_TsUsInn = NAN
      EndIf
    Else
      S3_TpDsInn = NAN : S3_dTDsInn = NAN : S3_TsDsInn = NAN : S3_TpUsInn = NAN : S3_dTUsInn = NAN : S3_TsUsInn = NAN
    EndIf

    ' M5! - Upstream Thermistor Max Temp Times
    SDI12BaseCmd = "M5!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 2)
      If SDI12ReturnCode = 0 Then
        S3_tMxTUsO = TempSDIRd(1)
        S3_tMxTUsI = TempSDIRd(2)
      Else
        S3_tMxTUsO = NAN : S3_tMxTUsI = NAN
      EndIf
    Else
      S3_tMxTUsO = NAN : S3_tMxTUsI = NAN
    EndIf

    ' --- Sensor 4 (Address "4") ---
    SDI12AddrChar = "4"

    ' Standard Measurement (M!)
    SDI12BaseCmd = "M!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, STD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 5)
      If SDI12ReturnCode = 0 Then
        S4_AlpOut = TempSDIRd(4)
        S4_AlpInn = TempSDIRd(5)
      Else
        S4_AlpOut = NAN : S4_AlpInn = NAN
      EndIf
      SDI12BaseCmd = "D1!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 4)
      If SDI12ReturnCode = 0 Then
        S4_BetOut = TempSDIRd(1)
        S4_BetInn = TempSDIRd(2)
        S4_tMxTout = TempSDIRd(3)
        S4_tMxTinn = TempSDIRd(4)
      Else
        S4_BetOut = NAN : S4_BetInn = NAN : S4_tMxTout = NAN : S4_tMxTinn = NAN
      EndIf
    Else
      S4_AlpOut = NAN : S4_AlpInn = NAN : S4_BetOut = NAN : S4_BetInn = NAN : S4_tMxTout = NAN : S4_tMxTinn = NAN
    EndIf

    ' M1! - Outer Thermistor Temperatures
    SDI12BaseCmd = "M1!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S4_TpDsOut = TempSDIRd(1) : S4_dTDsOut = TempSDIRd(2) : S4_TsDsOut = TempSDIRd(3)
        S4_TpUsOut = TempSDIRd(4) : S4_dTUsOut = TempSDIRd(5) : S4_TsUsOut = TempSDIRd(6)
      Else
        S4_TpDsOut = NAN : S4_dTDsOut = NAN : S4_TsDsOut = NAN : S4_TpUsOut = NAN : S4_dTUsOut = NAN : S4_TsUsOut = NAN
      EndIf
    Else
      S4_TpDsOut = NAN : S4_dTDsOut = NAN : S4_TsDsOut = NAN : S4_TpUsOut = NAN : S4_dTUsOut = NAN : S4_TsUsOut = NAN
    EndIf

    ' M2! - Inner Thermistor Temperatures
    SDI12BaseCmd = "M2!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S4_TpDsInn = TempSDIRd(1) : S4_dTDsInn = TempSDIRd(2) : S4_TsDsInn = TempSDIRd(3)
        S4_TpUsInn = TempSDIRd(4) : S4_dTUsInn = TempSDIRd(5) : S4_TsUsInn = TempSDIRd(6)
      Else
        S4_TpDsInn = NAN : S4_dTDsInn = NAN : S4_TsDsInn = NAN : S4_TpUsInn = NAN : S4_dTUsInn = NAN : S4_TsUsInn = NAN
      EndIf
    Else
      S4_TpDsInn = NAN : S4_dTDsInn = NAN : S4_TsDsInn = NAN : S4_TpUsInn = NAN : S4_dTUsInn = NAN : S4_TsUsInn = NAN
    EndIf

    ' M5! - Upstream Thermistor Max Temp Times
    SDI12BaseCmd = "M5!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 2)
      If SDI12ReturnCode = 0 Then
        S4_tMxTUsO = TempSDIRd(1)
        S4_tMxTUsI = TempSDIRd(2)
      Else
        S4_tMxTUsO = NAN : S4_tMxTUsI = NAN
      EndIf
    Else
      S4_tMxTUsO = NAN : S4_tMxTUsI = NAN
    EndIf

    ' --- Sensor 5 (Address "5") ---
    SDI12AddrChar = "5"

    ' Standard Measurement (M!)
    SDI12BaseCmd = "M!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, STD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 5)
      If SDI12ReturnCode = 0 Then
        S5_AlpOut = TempSDIRd(4)
        S5_AlpInn = TempSDIRd(5)
      Else
        S5_AlpOut = NAN : S5_AlpInn = NAN
      EndIf
      SDI12BaseCmd = "D1!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 4)
      If SDI12ReturnCode = 0 Then
        S5_BetOut = TempSDIRd(1)
        S5_BetInn = TempSDIRd(2)
        S5_tMxTout = TempSDIRd(3)
        S5_tMxTinn = TempSDIRd(4)
      Else
        S5_BetOut = NAN : S5_BetInn = NAN : S5_tMxTout = NAN : S5_tMxTinn = NAN
      EndIf
    Else
      S5_AlpOut = NAN : S5_AlpInn = NAN : S5_BetOut = NAN : S5_BetInn = NAN : S5_tMxTout = NAN : S5_tMxTinn = NAN
    EndIf

    ' M1! - Outer Thermistor Temperatures
    SDI12BaseCmd = "M1!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S5_TpDsOut = TempSDIRd(1) : S5_dTDsOut = TempSDIRd(2) : S5_TsDsOut = TempSDIRd(3)
        S5_TpUsOut = TempSDIRd(4) : S5_dTUsOut = TempSDIRd(5) : S5_TsUsOut = TempSDIRd(6)
      Else
        S5_TpDsOut = NAN : S5_dTDsOut = NAN : S5_TsDsOut = NAN : S5_TpUsOut = NAN : S5_dTUsOut = NAN : S5_TsUsOut = NAN
      EndIf
    Else
      S5_TpDsOut = NAN : S5_dTDsOut = NAN : S5_TsDsOut = NAN : S5_TpUsOut = NAN : S5_dTUsOut = NAN : S5_TsUsOut = NAN
    EndIf

    ' M2! - Inner Thermistor Temperatures
    SDI12BaseCmd = "M2!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S5_TpDsInn = TempSDIRd(1) : S5_dTDsInn = TempSDIRd(2) : S5_TsDsInn = TempSDIRd(3)
        S5_TpUsInn = TempSDIRd(4) : S5_dTUsInn = TempSDIRd(5) : S5_TsUsInn = TempSDIRd(6)
      Else
        S5_TpDsInn = NAN : S5_dTDsInn = NAN : S5_TsDsInn = NAN : S5_TpUsInn = NAN : S5_dTUsInn = NAN : S5_TsUsInn = NAN
      EndIf
    Else
      S5_TpDsInn = NAN : S5_dTDsInn = NAN : S5_TsDsInn = NAN : S5_TpUsInn = NAN : S5_dTUsInn = NAN : S5_TsUsInn = NAN
    EndIf

    ' M5! - Upstream Thermistor Max Temp Times
    SDI12BaseCmd = "M5!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 2)
      If SDI12ReturnCode = 0 Then
        S5_tMxTUsO = TempSDIRd(1)
        S5_tMxTUsI = TempSDIRd(2)
      Else
        S5_tMxTUsO = NAN : S5_tMxTUsI = NAN
      EndIf
    Else
      S5_tMxTUsO = NAN : S5_tMxTUsI = NAN
    EndIf

    ' --- Sensor 6 (Address "6") ---
    SDI12AddrChar = "6"

    ' Standard Measurement (M!)
    SDI12BaseCmd = "M!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, STD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 5)
      If SDI12ReturnCode = 0 Then
        S6_AlpOut = TempSDIRd(4)
        S6_AlpInn = TempSDIRd(5)
      Else
        S6_AlpOut = NAN : S6_AlpInn = NAN
      EndIf
      SDI12BaseCmd = "D1!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 4)
      If SDI12ReturnCode = 0 Then
        S6_BetOut = TempSDIRd(1)
        S6_BetInn = TempSDIRd(2)
        S6_tMxTout = TempSDIRd(3)
        S6_tMxTinn = TempSDIRd(4)
      Else
        S6_BetOut = NAN : S6_BetInn = NAN : S6_tMxTout = NAN : S6_tMxTinn = NAN
      EndIf
    Else
      S6_AlpOut = NAN : S6_AlpInn = NAN : S6_BetOut = NAN : S6_BetInn = NAN : S6_tMxTout = NAN : S6_tMxTinn = NAN
    EndIf

    ' M1! - Outer Thermistor Temperatures
    SDI12BaseCmd = "M1!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S6_TpDsOut = TempSDIRd(1) : S6_dTDsOut = TempSDIRd(2) : S6_TsDsOut = TempSDIRd(3)
        S6_TpUsOut = TempSDIRd(4) : S6_dTUsOut = TempSDIRd(5) : S6_TsUsOut = TempSDIRd(6)
      Else
        S6_TpDsOut = NAN : S6_dTDsOut = NAN : S6_TsDsOut = NAN : S6_TpUsOut = NAN : S6_dTUsOut = NAN : S6_TsUsOut = NAN
      EndIf
    Else
      S6_TpDsOut = NAN : S6_dTDsOut = NAN : S6_TsDsOut = NAN : S6_TpUsOut = NAN : S6_dTUsOut = NAN : S6_TsUsOut = NAN
    EndIf

    ' M2! - Inner Thermistor Temperatures
    SDI12BaseCmd = "M2!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S6_TpDsInn = TempSDIRd(1) : S6_dTDsInn = TempSDIRd(2) : S6_TsDsInn = TempSDIRd(3)
        S6_TpUsInn = TempSDIRd(4) : S6_dTUsInn = TempSDIRd(5) : S6_TsUsInn = TempSDIRd(6)
      Else
        S6_TpDsInn = NAN : S6_dTDsInn = NAN : S6_TsDsInn = NAN : S6_TpUsInn = NAN : S6_dTUsInn = NAN : S6_TsUsInn = NAN
      EndIf
    Else
      S6_TpDsInn = NAN : S6_dTDsInn = NAN : S6_TsDsInn = NAN : S6_TpUsInn = NAN : S6_dTUsInn = NAN : S6_TsUsInn = NAN
    EndIf

    ' M5! - Upstream Thermistor Max Temp Times
    SDI12BaseCmd = "M5!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 2)
      If SDI12ReturnCode = 0 Then
        S6_tMxTUsO = TempSDIRd(1)
        S6_tMxTUsI = TempSDIRd(2)
      Else
        S6_tMxTUsO = NAN : S6_tMxTUsI = NAN
      EndIf
    Else
      S6_tMxTUsO = NAN : S6_tMxTUsI = NAN
    EndIf

    ' --- Sensor 7 (Address "7") ---
    SDI12AddrChar = "7"

    ' Standard Measurement (M!)
    SDI12BaseCmd = "M!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, STD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 5)
      If SDI12ReturnCode = 0 Then
        S7_AlpOut = TempSDIRd(4)
        S7_AlpInn = TempSDIRd(5)
      Else
        S7_AlpOut = NAN : S7_AlpInn = NAN
      EndIf
      SDI12BaseCmd = "D1!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 4)
      If SDI12ReturnCode = 0 Then
        S7_BetOut = TempSDIRd(1)
        S7_BetInn = TempSDIRd(2)
        S7_tMxTout = TempSDIRd(3)
        S7_tMxTinn = TempSDIRd(4)
      Else
        S7_BetOut = NAN : S7_BetInn = NAN : S7_tMxTout = NAN : S7_tMxTinn = NAN
      EndIf
    Else
      S7_AlpOut = NAN : S7_AlpInn = NAN : S7_BetOut = NAN : S7_BetInn = NAN : S7_tMxTout = NAN : S7_tMxTinn = NAN
    EndIf

    ' M1! - Outer Thermistor Temperatures
    SDI12BaseCmd = "M1!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S7_TpDsOut = TempSDIRd(1) : S7_dTDsOut = TempSDIRd(2) : S7_TsDsOut = TempSDIRd(3)
        S7_TpUsOut = TempSDIRd(4) : S7_dTUsOut = TempSDIRd(5) : S7_TsUsOut = TempSDIRd(6)
      Else
        S7_TpDsOut = NAN : S7_dTDsOut = NAN : S7_TsDsOut = NAN : S7_TpUsOut = NAN : S7_dTUsOut = NAN : S7_TsUsOut = NAN
      EndIf
    Else
      S7_TpDsOut = NAN : S7_dTDsOut = NAN : S7_TsDsOut = NAN : S7_TpUsOut = NAN : S7_dTUsOut = NAN : S7_TsUsOut = NAN
    EndIf

    ' M2! - Inner Thermistor Temperatures
    SDI12BaseCmd = "M2!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 6)
      If SDI12ReturnCode = 0 Then
        S7_TpDsInn = TempSDIRd(1) : S7_dTDsInn = TempSDIRd(2) : S7_TsDsInn = TempSDIRd(3)
        S7_TpUsInn = TempSDIRd(4) : S7_dTUsInn = TempSDIRd(5) : S7_TsUsInn = TempSDIRd(6)
      Else
        S7_TpDsInn = NAN : S7_dTDsInn = NAN : S7_TsDsInn = NAN : S7_TpUsInn = NAN : S7_dTUsInn = NAN : S7_TsUsInn = NAN
      EndIf
    Else
      S7_TpDsInn = NAN : S7_dTDsInn = NAN : S7_TsDsInn = NAN : S7_TpUsInn = NAN : S7_dTUsInn = NAN : S7_TsUsInn = NAN
    EndIf

    ' M5! - Upstream Thermistor Max Temp Times
    SDI12BaseCmd = "M5!"
    SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
    SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, SDI12ExpectedValues, 1.0, 0)
    If SDI12ReturnCode = 0 Then
      Delay (0, ADD_MEAS_WAIT_MS, mSec)
      SDI12BaseCmd = "D0!"
      SDI12CmdString = SDI12AddrChar + SDI12BaseCmd
      SDI12Recorder (SDI12ReturnCode, SDI12_PORT, SDI12CmdString, TempSDIRd(1), 1.0, 0, -1, 2)
      If SDI12ReturnCode = 0 Then
        S7_tMxTUsO = TempSDIRd(1)
        S7_tMxTUsI = TempSDIRd(2)
      Else
        S7_tMxTUsO = NAN : S7_tMxTUsI = NAN
      EndIf
    Else
      S7_tMxTUsO = NAN : S7_tMxTUsI = NAN
    EndIf

    CallTable SapFlowAll
  NextScan
EndProg