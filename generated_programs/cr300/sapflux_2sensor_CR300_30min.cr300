' CR300 Series Datalogger Program
' Program to log 20 specified measurements from Implexx Sap Flow Sensors
' Generated by Python Script (cr300_generator.py)
' Number of Sensors: 2
' Measurement Interval: 30 minutes

'--- Constants ---
Const MEAST_INTERVAL_MIN = 30
Const SDI12_PORT = C1 ' Default SDI-12 Port (e.g., C1, C2)

'--- Declare Public Variables ---
Public PTemp_C As Float
Public Batt_volt As Float
Dim N_Loop ' Generic loop counter for error handling

Public S0_M_Data(9) As Float
Public S0_M1_Data(6) As Float
Public S0_M2_Data(6) As Float
Public S0_M5_Data(2) As Float
Public S1_M_Data(9) As Float
Public S1_M1_Data(6) As Float
Public S1_M2_Data(6) As Float
Public S1_M5_Data(2) As Float

'--- Alias Declarations (for logged variables) ---
Alias S0_M_Data(4) = S0_AlpOut : Units S0_AlpOut=ratio
Alias S0_M_Data(5) = S0_AlpInn : Units S0_AlpInn=ratio
Alias S0_M_Data(6) = S0_BetOut : Units S0_BetOut=ratio
Alias S0_M_Data(7) = S0_BetInn : Units S0_BetInn=ratio
Alias S0_M_Data(8) = S0_tMxTout : Units S0_tMxTout=sec
Alias S0_M_Data(9) = S0_tMxTinn : Units S0_tMxTinn=sec
Alias S0_M1_Data(1) = S0_TpDsOut : Units S0_TpDsOut=degC
Alias S0_M1_Data(2) = S0_dTDsOut : Units S0_dTDsOut=degC
Alias S0_M1_Data(3) = S0_TsDsOut : Units S0_TsDsOut=degC
Alias S0_M1_Data(4) = S0_TpUsOut : Units S0_TpUsOut=degC
Alias S0_M1_Data(5) = S0_dTUsOut : Units S0_dTUsOut=degC
Alias S0_M1_Data(6) = S0_TsUsOut : Units S0_TsUsOut=degC
Alias S0_M2_Data(1) = S0_TpDsInn : Units S0_TpDsInn=degC
Alias S0_M2_Data(2) = S0_dTDsInn : Units S0_dTDsInn=degC
Alias S0_M2_Data(3) = S0_TsDsInn : Units S0_TsDsInn=degC
Alias S0_M2_Data(4) = S0_TpUsInn : Units S0_TpUsInn=degC
Alias S0_M2_Data(5) = S0_dTUsInn : Units S0_dTUsInn=degC
Alias S0_M2_Data(6) = S0_TsUsInn : Units S0_TsUsInn=degC
Alias S0_M5_Data(1) = S0_tMxTUsO : Units S0_tMxTUsO=sec
Alias S0_M5_Data(2) = S0_tMxTUsI : Units S0_tMxTUsI=sec
Alias S1_M_Data(4) = S1_AlpOut : Units S1_AlpOut=ratio
Alias S1_M_Data(5) = S1_AlpInn : Units S1_AlpInn=ratio
Alias S1_M_Data(6) = S1_BetOut : Units S1_BetOut=ratio
Alias S1_M_Data(7) = S1_BetInn : Units S1_BetInn=ratio
Alias S1_M_Data(8) = S1_tMxTout : Units S1_tMxTout=sec
Alias S1_M_Data(9) = S1_tMxTinn : Units S1_tMxTinn=sec
Alias S1_M1_Data(1) = S1_TpDsOut : Units S1_TpDsOut=degC
Alias S1_M1_Data(2) = S1_dTDsOut : Units S1_dTDsOut=degC
Alias S1_M1_Data(3) = S1_TsDsOut : Units S1_TsDsOut=degC
Alias S1_M1_Data(4) = S1_TpUsOut : Units S1_TpUsOut=degC
Alias S1_M1_Data(5) = S1_dTUsOut : Units S1_dTUsOut=degC
Alias S1_M1_Data(6) = S1_TsUsOut : Units S1_TsUsOut=degC
Alias S1_M2_Data(1) = S1_TpDsInn : Units S1_TpDsInn=degC
Alias S1_M2_Data(2) = S1_dTDsInn : Units S1_dTDsInn=degC
Alias S1_M2_Data(3) = S1_TsDsInn : Units S1_TsDsInn=degC
Alias S1_M2_Data(4) = S1_TpUsInn : Units S1_TpUsInn=degC
Alias S1_M2_Data(5) = S1_dTUsInn : Units S1_dTUsInn=degC
Alias S1_M2_Data(6) = S1_TsUsInn : Units S1_TsUsInn=degC
Alias S1_M5_Data(1) = S1_tMxTUsO : Units S1_tMxTUsO=sec
Alias S1_M5_Data(2) = S1_tMxTUsI : Units S1_tMxTUsI=sec

'--- DataTable Definition (Single Table for All Sensors) ---
DataTable (SapFlowAll, True, -1)
  DataInterval (0, MEAST_INTERVAL_MIN, Min, 0) ' No output delay
  Sample (1, Batt_volt, FP2)
  Sample (1, PTemp_C, FP2)
  Sample (1, S0_AlpOut, IEEE4)
  Sample (1, S0_AlpInn, IEEE4)
  Sample (1, S0_BetOut, IEEE4)
  Sample (1, S0_BetInn, IEEE4)
  Sample (1, S0_tMxTout, IEEE4)
  Sample (1, S0_tMxTinn, IEEE4)
  Sample (1, S0_TpDsOut, IEEE4)
  Sample (1, S0_dTDsOut, IEEE4)
  Sample (1, S0_TsDsOut, IEEE4)
  Sample (1, S0_TpUsOut, IEEE4)
  Sample (1, S0_dTUsOut, IEEE4)
  Sample (1, S0_TsUsOut, IEEE4)
  Sample (1, S0_TpDsInn, IEEE4)
  Sample (1, S0_dTDsInn, IEEE4)
  Sample (1, S0_TsDsInn, IEEE4)
  Sample (1, S0_TpUsInn, IEEE4)
  Sample (1, S0_dTUsInn, IEEE4)
  Sample (1, S0_TsUsInn, IEEE4)
  Sample (1, S0_tMxTUsO, IEEE4)
  Sample (1, S0_tMxTUsI, IEEE4)
  Sample (1, S1_AlpOut, IEEE4)
  Sample (1, S1_AlpInn, IEEE4)
  Sample (1, S1_BetOut, IEEE4)
  Sample (1, S1_BetInn, IEEE4)
  Sample (1, S1_tMxTout, IEEE4)
  Sample (1, S1_tMxTinn, IEEE4)
  Sample (1, S1_TpDsOut, IEEE4)
  Sample (1, S1_dTDsOut, IEEE4)
  Sample (1, S1_TsDsOut, IEEE4)
  Sample (1, S1_TpUsOut, IEEE4)
  Sample (1, S1_dTUsOut, IEEE4)
  Sample (1, S1_TsUsOut, IEEE4)
  Sample (1, S1_TpDsInn, IEEE4)
  Sample (1, S1_dTDsInn, IEEE4)
  Sample (1, S1_TsDsInn, IEEE4)
  Sample (1, S1_TpUsInn, IEEE4)
  Sample (1, S1_dTUsInn, IEEE4)
  Sample (1, S1_TsUsInn, IEEE4)
  Sample (1, S1_tMxTUsO, IEEE4)
  Sample (1, S1_tMxTUsI, IEEE4)
EndTable

'--- Main Program ---
BeginProg
  Scan (MEAST_INTERVAL_MIN, Min, 1, 0) ' Scan interval, units, buffer=1, count=0 (continuous)
    PanelTemp (PTemp_C, 60) ' Defaulting to 60Hz fnotch, or use PanelTemp(PTemp_C)
    Battery (Batt_volt)

    ' Initialize all sensor data variables to NAN
    S0_AlpOut = NAN
    S0_AlpInn = NAN
    S0_BetOut = NAN
    S0_BetInn = NAN
    S0_tMxTout = NAN
    S0_tMxTinn = NAN
    S0_TpDsOut = NAN
    S0_dTDsOut = NAN
    S0_TsDsOut = NAN
    S0_TpUsOut = NAN
    S0_dTUsOut = NAN
    S0_TsUsOut = NAN
    S0_TpDsInn = NAN
    S0_dTDsInn = NAN
    S0_TsDsInn = NAN
    S0_TpUsInn = NAN
    S0_dTUsInn = NAN
    S0_TsUsInn = NAN
    S0_tMxTUsO = NAN
    S0_tMxTUsI = NAN
    S1_AlpOut = NAN
    S1_AlpInn = NAN
    S1_BetOut = NAN
    S1_BetInn = NAN
    S1_tMxTout = NAN
    S1_tMxTinn = NAN
    S1_TpDsOut = NAN
    S1_dTDsOut = NAN
    S1_TsDsOut = NAN
    S1_TpUsOut = NAN
    S1_dTUsOut = NAN
    S1_TsUsOut = NAN
    S1_TpDsInn = NAN
    S1_dTDsInn = NAN
    S1_TsDsInn = NAN
    S1_TpUsInn = NAN
    S1_dTUsInn = NAN
    S1_TsUsInn = NAN
    S1_tMxTUsO = NAN
    S1_tMxTUsI = NAN

    ' --- Sensor 0 (Address "0") ---
    SDI12Recorder(S0_M_Data(), SDI12_PORT, "0", "M!", 1.0, 0, -1)
    If S0_M_Data(1) = NAN Then ' Check if first value is NAN (measurement failed)
      Move (S0_M_Data(), 9, NAN, 1) ' Set all elements of this array to NAN
    EndIf

    ' M1! Measurement
    SDI12Recorder(S0_M1_Data(), SDI12_PORT, "0", "M1!", 1.0, 0, -1)
    If S0_M1_Data(1) = NAN Then
      Move (S0_M1_Data(), 6, NAN, 1)
    EndIf

    ' M2! Measurement
    SDI12Recorder(S0_M2_Data(), SDI12_PORT, "0", "M2!", 1.0, 0, -1)
    If S0_M2_Data(1) = NAN Then
      Move (S0_M2_Data(), 6, NAN, 1)
    EndIf

    ' M5! Measurement
    SDI12Recorder(S0_M5_Data(), SDI12_PORT, "0", "M5!", 1.0, 0, -1)
    If S0_M5_Data(1) = NAN Then
      Move (S0_M5_Data(), 2, NAN, 1)
    EndIf

    ' --- Sensor 1 (Address "1") ---
    SDI12Recorder(S1_M_Data(), SDI12_PORT, "1", "M!", 1.0, 0, -1)
    If S1_M_Data(1) = NAN Then ' Check if first value is NAN (measurement failed)
      Move (S1_M_Data(), 9, NAN, 1) ' Set all elements of this array to NAN
    EndIf

    ' M1! Measurement
    SDI12Recorder(S1_M1_Data(), SDI12_PORT, "1", "M1!", 1.0, 0, -1)
    If S1_M1_Data(1) = NAN Then
      Move (S1_M1_Data(), 6, NAN, 1)
    EndIf

    ' M2! Measurement
    SDI12Recorder(S1_M2_Data(), SDI12_PORT, "1", "M2!", 1.0, 0, -1)
    If S1_M2_Data(1) = NAN Then
      Move (S1_M2_Data(), 6, NAN, 1)
    EndIf

    ' M5! Measurement
    SDI12Recorder(S1_M5_Data(), SDI12_PORT, "1", "M5!", 1.0, 0, -1)
    If S1_M5_Data(1) = NAN Then
      Move (S1_M5_Data(), 2, NAN, 1)
    EndIf

    CallTable SapFlowAll
  NextScan
EndProg