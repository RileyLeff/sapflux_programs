# src/cr200x_generator.py

# Constants specific to CR200X generation strategy
MAX_SENSORS_CR200X_ONE_TABLE_PER_SENSOR = 8
MIN_MEASURE_INTERVAL_MINUTES_IMPLEX_CR200X = 15

# This is the function that main.py will call
def generate_code(num_sensors, measure_interval_min, **kwargs):
    """
    Generates CRBasic code for CR200/CR200X dataloggers.
    """
    # --- Module-specific Validation ---
    if not (1 <= num_sensors <= MAX_SENSORS_CR200X_ONE_TABLE_PER_SENSOR):
        return (f"' Error in cr200x_generator: Number of sensors must be between 1 and "
                f"{MAX_SENSORS_CR200X_ONE_TABLE_PER_SENSOR} for CR200X with one table per sensor strategy.")
    # Note: Interval warning/error is handled by main_cli.py for consistency,
    # but could also be strictly enforced here.

    # --- Start of CR200X Generation Logic (from your previous working script) ---
    standard_measurements = [
        ("SapFlwTot", "literPerHour"), ("VhOuter", "heatVelocity"),
        ("VhInner", "heatVelocity"), ("AlphaOut", "logTRatio"),
        ("AlphaIn", "logTRatio"), ("BetaOut", "logTRatio"),
        ("BetaIn", "logTRatio"), ("tMaxTout", "second"),
        ("tMaxTin", "second"),
    ]

    def get_sdi12_address_char(index):
        if 0 <= index <= 7: return str(index)
        raise ValueError(f"Sensor index {index} out of range (0-7).") # Should be caught by main validation

    crbasic_code_list = []
    crbasic_code_list.append("' CR200/CR200X Series")
    crbasic_code_list.append("' Program to log standard data from Implexx Sap Flow Sensors")
    crbasic_code_list.append("' Generated by Python Script (cr200x_generator.py)")
    crbasic_code_list.append(f"' Number of Sensors: {num_sensors}")
    crbasic_code_list.append(f"' Measurement Interval: {measure_interval_min} minutes")
    crbasic_code_list.append("' NOTE: This program uses one DataTable per sensor.")
    crbasic_code_list.append(f"' CR200X supports a maximum of {MAX_SENSORS_CR200X_ONE_TABLE_PER_SENSOR} DataTables with this strategy.")
    crbasic_code_list.append("")

    crbasic_code_list.append("'--- Declare Variables and Units ---")
    if num_sensors == 1:
        crbasic_code_list.append("Dim N")
    else:
        for i in range(num_sensors):
            sdi_address_char = get_sdi12_address_char(i)
            crbasic_code_list.append(f"Dim N_{sdi_address_char} ' Loop counter for Sensor {sdi_address_char} error handling")
    crbasic_code_list.append("Public BattV")
    crbasic_code_list.append("Public id")
    for i in range(num_sensors):
        sdi_address_char = get_sdi12_address_char(i)
        crbasic_code_list.append(f"Public SDIData_Sensor{sdi_address_char}(9)")
        crbasic_code_list.append(f"Public SensorAddress{sdi_address_char}")

    crbasic_code_list.append("\n'--- Alias Declarations (Maps array elements to meaningful names) ---")
    for i in range(num_sensors):
        sdi_address_char = get_sdi12_address_char(i)
        for j in range(len(standard_measurements)):
            alias_name = f"{standard_measurements[j][0]}{sdi_address_char}"
            crbasic_code_list.append(f"Alias SDIData_Sensor{sdi_address_char}({j+1}) = {alias_name}")

    crbasic_code_list.append("\n'--- Units Declarations ---")
    crbasic_code_list.append("Units BattV=Volts")
    for i in range(num_sensors):
        sdi_address_char = get_sdi12_address_char(i)
        for j in range(len(standard_measurements)):
            alias_name = f"{standard_measurements[j][0]}{sdi_address_char}"
            unit = standard_measurements[j][1]
            crbasic_code_list.append(f"Units {alias_name}={unit}")

    crbasic_code_list.append("\n'--- Define Data Tables (One table per sensor due to CR200X field limit) ---")
    crbasic_code_list.append(f"' Note: CR200X dataloggers have a limit of 16 fields per table and {MAX_SENSORS_CR200X_ONE_TABLE_PER_SENSOR} tables total.")
    crbasic_code_list.append("' DataTable names must be <= 12 characters.")
    for i in range(num_sensors):
        sdi_address_char = get_sdi12_address_char(i)
        table_name = f"Table_S{sdi_address_char}"
        crbasic_code_list.append(f"DataTable({table_name},True,-1)")
        crbasic_code_list.append(f"\tDataInterval(0,{measure_interval_min},Min)")
        crbasic_code_list.append("\tMinimum(1,BattV,False,False)")
        crbasic_code_list.append("\tSample(1,id)")
        crbasic_code_list.append(f"\tSample(1,SensorAddress{sdi_address_char})")
        for j in range(len(standard_measurements)):
            alias_name = f"{standard_measurements[j][0]}{sdi_address_char}"
            crbasic_code_list.append(f"\tSample(1,{alias_name})")
        crbasic_code_list.append("EndTable\n")

    crbasic_code_list.append("\n'--- Main Program ---")
    crbasic_code_list.append("BeginProg")
    crbasic_code_list.append(f"\tScan({measure_interval_min},Min)")
    crbasic_code_list.append("\t\t'Default CR200 Series Datalogger Battery Voltage measurement 'BattV'")
    crbasic_code_list.append("\t\tBattery(BattV)")
    crbasic_code_list.append("\t\t'User Entered Calculation (from example)")
    crbasic_code_list.append("\t\tid = Status.PakBusAddress(1,1)")
    for i in range(num_sensors):
        sdi_address_char = get_sdi12_address_char(i)
        crbasic_code_list.append(f"\t\tSensorAddress{sdi_address_char} = {i}")
    crbasic_code_list.append("")

    for i in range(num_sensors):
        sdi_address_char_cmd = get_sdi12_address_char(i)
        sdi_address_char_var = get_sdi12_address_char(i)
        loop_counter = "N" if num_sensors == 1 else f"N_{sdi_address_char_var}"
        crbasic_code_list.append(f"\t\t' --- Collect standard data for Sensor {sdi_address_char_cmd} (Address \"{sdi_address_char_cmd}\") ---")
        crbasic_code_list.append(f"\t\tSDI12Recorder(SDIData_Sensor{sdi_address_char_var}(), \"{sdi_address_char_cmd}M!\", 1, 0)")
        crbasic_code_list.append(f"\t\t'Reset all Generic SDI-12 Sensor measurements if NAN is returned to the first element")
        crbasic_code_list.append(f"\t\tIf SDIData_Sensor{sdi_address_char_var}(1) = NAN Then")
        crbasic_code_list.append(f"\t\t\tFor {loop_counter} = 1 To 9")
        crbasic_code_list.append(f"\t\t\t\tSDIData_Sensor{sdi_address_char_var}({loop_counter}) = NAN")
        crbasic_code_list.append(f"\t\t\tNext")
        crbasic_code_list.append(f"\t\tEndIf\n")

    crbasic_code_list.append("\t\t'Call Data Tables and Store Data")
    for i in range(num_sensors):
        sdi_address_char = get_sdi12_address_char(i)
        table_name = f"Table_S{sdi_address_char}"
        crbasic_code_list.append(f"\t\tCallTable {table_name}")

    crbasic_code_list.append("\tNextScan")
    crbasic_code_list.append("EndProg")

    return "\n".join(crbasic_code_list)

# Optional: Direct testing block (as before)
if __name__ == "__main__":
    print("--- Testing cr200x_generator.py directly ---")
    test_code = generate_code(num_sensors=1, measure_interval_min=30)
    print(test_code)