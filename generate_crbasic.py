#!/usr/bin/env uv run python
# /// script
# dependencies:
# ///

import sys
import argparse # For command-line arguments

def generate_crbasic_program(num_sensors, measure_interval_min):
    """
    Generates self-contained CRBasic code for CR200/CR200X dataloggers
    to read standard data from multiple Implexx sap flow sensors (0 to N-1).
    Adheres to CR200X limitations (16 fields per table, 12-char DataTable names, specific syntax).

    Args:
        num_sensors (int): The number of sensors (0 to N-1).
        measure_interval_min (int): The measurement interval in minutes.

    Returns:
        str: The generated CRBasic program as a string.
    """

    if num_sensors <= 0:
        return "' Error: Number of sensors must be at least 1."

    # Define the 9 standard measurement names and their units based on your example
    # Shortened names for CR200X field name limit (<= 12 characters)
    standard_measurements = [
        ("SapFlwTot", "literPerHour"),
        ("VhOuter", "heatVelocity"), # Based on example alias, likely SFDOuter
        ("VhInner", "heatVelocity"), # Based on example alias, likely SFDInner
        ("AlphaOut", "logTRatio"),
        ("AlphaIn", "logTRatio"),
        ("BetaOut", "logTRatio"),
        ("BetaIn", "logTRatio"),
        ("tMaxTout", "second"),
        ("tMaxTin", "second"),
    ]

    crbasic_code = ""

    # --- File Header ---
    crbasic_code += "' CR200/CR200X Series\n"
    crbasic_code += "' Program to log standard data from Implexx Sap Flow Sensors\n"
    crbasic_code += "' Generated by Python Script (PEP 723 compliant)\n"
    crbasic_code += f"' Number of Sensors: {num_sensors}\n"
    crbasic_code += f"' Measurement Interval: {measure_interval_min} minutes\n"
    crbasic_code += "\n"

    # --- Declare Variables and Units ---
    crbasic_code += "'--- Declare Variables and Units ---\n"

    # Declare loop counters (as in example, using N_i for sensor i's error loop if N > 1)
    if num_sensors == 1:
        crbasic_code += "Dim N\n"
    else:
        for i in range(num_sensors):
            crbasic_code += f"Dim N_{i} ' Loop counter for Sensor {i} error handling\n"


    # Declare Public BattV and id (from example)
    crbasic_code += "Public BattV\n"
    crbasic_code += "Public id\n"

    # Declare Public arrays for each sensor's standard data (9 values)
    for i in range(num_sensors):
        crbasic_code += f"Public SDIData_Sensor{i}(9)\n"

    # Declare Public variables for sensor addresses (placeholders from example)
    for i in range(num_sensors):
         crbasic_code += f"Public SensorAddress{i}\n"


    # Declare Alias for each sensor's standard data points (<= 12 characters)
    crbasic_code += "\n'--- Alias Declarations (Maps array elements to meaningful names) ---\n"
    for i in range(num_sensors):
        for j in range(len(standard_measurements)):
            alias_name = f"{standard_measurements[j][0]}{i}"
            # Ensure alias names are <= 12 characters
            if len(alias_name) > 12:
                 # This shouldn't happen with current names and num_sensors < 10
                 pass
            crbasic_code += f"Alias SDIData_Sensor{i}({j+1}) = {alias_name}\n" # SDI-12 arrays are 1-indexed


    # Declare Units for each aliased variable and BattV
    crbasic_code += "\n'--- Units Declarations ---\n"
    crbasic_code += "Units BattV=Volts\n" # Unit for BattV from example

    for i in range(num_sensors):
        for j in range(len(standard_measurements)):
            alias_name = f"{standard_measurements[j][0]}{i}"
            unit = standard_measurements[j][1]
            crbasic_code += f"Units {alias_name}={unit}\n"

    # --- Define Data Tables Section ---
    crbasic_code += "\n'--- Define Data Tables (One table per sensor due to CR200X field limit) ---\n"
    crbasic_code += "' Note: CR200X dataloggers have a limit of 16 fields per table.\n"
    crbasic_code += "' DataTable names must be <= 12 characters.\n"

    for i in range(num_sensors):
        table_name = f"Table_S{i}" # Shortened DataTable name (e.g., Table_S0, Table_S1)
        if len(table_name) > 12:
            # This should not happen with current naming for N < 100
            return f"' Error: Generated DataTable name '{table_name}' is too long."

        crbasic_code += f"DataTable({table_name},True,-1)\n"
        crbasic_code += f"\tDataInterval(0,{measure_interval_min},Min)\n"
        crbasic_code += "\tMinimum(1,BattV,False,False)\n" # Metadata from example
        crbasic_code += "\tSample(1,id)\n" # Metadata from example
        crbasic_code += f"\tSample(1,SensorAddress{i})\n" # Sensor address placeholder

        # Sample the 9 standard values for this sensor using aliases (these become field names)
        for j in range(len(standard_measurements)):
            alias_name = f"{standard_measurements[j][0]}{i}"
            crbasic_code += f"\tSample(1,{alias_name})\n"

        crbasic_code += "EndTable\n\n"


    # --- Main Program Section ---
    crbasic_code += "'--- Main Program ---\n"
    crbasic_code += "BeginProg\n"

    # Main Scan loop
    crbasic_code += f"\tScan({measure_interval_min},Min)\n"

    # Battery measurement
    crbasic_code += "\t\t'Default CR200 Series Datalogger Battery Voltage measurement 'BattV'\n"
    crbasic_code += "\t\tBattery(BattV)\n"

    # User Entered Calculation (from example)
    crbasic_code += "\t\t'User Entered Calculation (from example)\n"
    crbasic_code += "\t\tid = Status.PakBusAddress(1,1)\n"
    for i in range(num_sensors):
        crbasic_code += f"\t\tSensorAddress{i} = {i}\n" # Assign sensor address placeholder

    crbasic_code += "\n"

    # SDI-12 communication and error handling for each sensor
    for i in range(num_sensors):
        loop_counter = "N" if num_sensors == 1 else f"N_{i}"
        crbasic_code += f"\t\t' --- Collect standard data for Sensor {i} (Address \"{i}\") ---\n"
        # Use the exact SDI12Recorder syntax from the example for standard measurements
        crbasic_code += f"\t\tSDI12Recorder(SDIData_Sensor{i}(), \"{i}M!\", 1, 0)\n"

        # Error handling (example style)
        crbasic_code += f"\t\t'Reset all Generic SDI-12 Sensor measurements if NAN is returned to the first element\n"
        crbasic_code += f"\t\tIf SDIData_Sensor{i}(1) = NAN Then\n"
        crbasic_code += f"\t\t\tFor {loop_counter} = 1 To 9\n"
        crbasic_code += f"\t\t\t\tSDIData_Sensor{i}({loop_counter}) = NAN\n"
        crbasic_code += f"\t\t\tNext\n"
        crbasic_code += f"\t\tEndIf\n\n"


    # Call Data Tables and Store Data (one call per sensor's table)
    crbasic_code += "\t\t'Call Data Tables and Store Data\n"
    for i in range(num_sensors):
        table_name = f"Table_S{i}"
        crbasic_code += f"\t\tCallTable {table_name}\n"

    # End Scan loop
    crbasic_code += "\tNextScan\n"

    # End Program
    crbasic_code += "EndProg\n"

    return crbasic_code

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Generate CRBasic code for Implexx Sap Flow Sensors on CR200/CR200X.",
        formatter_class=argparse.RawTextHelpFormatter,
        epilog="""\
Example usage:
  python %(prog)s 2 30 -o sapflux_2_sensors.cr2
  (Generates code for 2 sensors, 30-minute interval, output to sapflux_2_sensors.cr2)

  python %(prog)s 1 60
  (Generates code for 1 sensor, 60-minute interval, prints to console)
"""
    )
    parser.add_argument(
        "num_sensors",
        type=int,
        help="The number of sensors (N, integer, e.g., 1, 2, 3)."
    )
    parser.add_argument(
        "measure_interval",
        type=int,
        help="The measurement interval in minutes (T, integer, e.g., 30, 60)."
    )
    parser.add_argument(
        "-o", "--output",
        metavar="FILENAME",
        type=str,
        help="Optional: Output filename for the generated CRBasic code (e.g., my_program.cr2)."
    )

    args = parser.parse_args()

    if args.num_sensors < 1:
        print("Error: Number of sensors must be at least 1.")
        sys.exit(1)
    if args.measure_interval <= 0:
         print("Error: Measurement interval must be a positive integer.")
         sys.exit(1)

    try:
        generated_code = generate_crbasic_program(args.num_sensors, args.measure_interval)

        if args.output:
            with open(args.output, "w") as f:
                f.write(generated_code)
            print(f"CRBasic code generated and saved to '{args.output}'.")
        else:
            print(generated_code)

    except Exception as e:
        print(f"\nAn unexpected error occurred: {e}")
        sys.exit(1)